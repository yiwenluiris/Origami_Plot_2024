data_1 <- data[ind_1, ] %>% as.data.frame()
data_2 <- data[ind_2, ] %>% as.data.frame()
##### Algorithm #####
# Step 1, fit theta_hat and eta_hat
glm1 <- glm(y ~ t + x1 + x2, family = "binomial", data = data_1)
theta_hat <- glm1$coefficients[2]
eta_y_hat <- glm1$coefficients[c(3, 4)]
var_theta_hat <- summary(glm1)$coefficients[, 2]^2
glm1_w <- glm(w ~ t + x1 + x2, family = "binomial", data = data_1)
b_hat <- glm1_w$coefficients[2]
eta_w_hat <- glm1_w$coefficients[c(3, 4)]
# Step 2, fit eta_tilde
glm2 <- glm(w ~ t + x1 + x2, family = "binomial", data = data_2)
b_tilde <- glm2$coefficients[2]
eta_tilde <- glm2$coefficients[c(3, 4)]
# Step 3, obtain the weight
# Skip for now
# Step 4, construct the final estimator
data_1_x <- as.matrix(data_1[, c("x1", "x2")])
data_2_x <- as.matrix(data_2[, c("x1", "x2")])
D1 <- calc_D1(theta_hat, eta_y_hat, data_1$y, data_1$t, data_1_x)
D2 <- calc_D2(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
C12 <- calc_C12(theta_hat, eta_y_hat, b_hat, eta_w_hat, data_1$y, data_1$w, data_1$t, data_1_x)
C22 <- calc_C22(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
theta_bar <- theta_hat - (1/D1) * C12 %*% inv(C22) %*% D2 %*% (eta_w_hat - eta_tilde)
benchmark[k] <- theta_hat
result[k] <- theta_bar
}
mean(result)
mean(benchmark)
sd(result)
sd(benchmark)
# Load necessary libraries
library(MASS)
library(matlib)
# Define the expit function
expit <- function(x) { exp(x) / (1 + exp(x)) }
# Define the sigmoid function
sigmoid <- function(z) {
return(1 / (1 + exp(-z)))
}
# Define the score functions
score_theta <- function(theta, eta_Y, Y, T, X) {
return(sum((Y - sigmoid(theta * T + X %*% eta_Y)) * T))
}
#score_theta(theta, eta_Y, Y, T, X)
score_theta_prime <- function(theta, eta_Y, Y, T, X){
return(sum(T^2 * sigmoid(theta * T + X %*% eta_Y)/(1+exp(theta * T + X %*% eta_Y))))
}
#score_theta_prime(theta,eta_Y,Y,T,X)
score_eta_W <- function(eta_W, b, W, T, X){
nr = dim(X)[2]
score_eta_w <- c()
for (i in 1:nr) {
score_eta_w[i] = sum(X[,i] * (W - sigmoid(b * T + eta_W[i]*X[,i])))
#score_eta_w[i] = sum(X[,i] * (W - sigmoid(b * T + X %*% eta_W)))
}
return(score_eta_w)
}
#score_eta_W(eta_W,b,W,T,X)
score_eta_W_prime <- function(b, eta_W, W, T, X){
nr = dim(X)[2]
score_eta_w_prime <- c()
for (i in 1:nr) {
score_eta_w_prime[i] = sum(X[,i] * X[,i] * sigmoid(b * T + eta_W[i] * X[,i])/(1+exp(b * T + eta_W[i] * X[,i])))
#score_eta_w_prime[i] = sum(X[,i] * X[,i] * sigmoid(b * T + X %*% eta_W)/(1+exp(b * T + X %*% eta_W)))
}
return(score_eta_w_prime)
}
#score_eta_W_prime(b,eta_W,W,T,X)
# Calculate D1
calc_D1 <- function(theta, eta_Y, Y, T, X) {
n <- length(Y)
D1 <- score_theta_prime(theta, eta_Y, Y, T, X)/n
return(D1)
}
# Calculate D2
calc_D2 <- function(b, eta_W, W, T, X) {
n <- length(T)
nr <- dim(X)[2]
p <- b * T + X %*% eta_W
D2 <- matrix(0 , nrow = nr, ncol = nr)
for (i in 1:nr) {
for(j in 1:nr){
D2[i,j] <- sum(X[,i] * X[,j] * exp(p) / (1+exp(p))^2) /n
}
}
return(D2)
}
# Calculate C12
calc_C12 <- function(theta, eta_Y, b, eta_W, Y, W, T, X) {
n <- length(Y)
C12 <- score_theta(theta, eta_Y, Y, T, X) * score_eta_W_prime(b, eta_W, W, T, X) / n
return(C12)
}
# Calculate C22
calc_C22 <- function(b, eta_W, W, T, X) {
nr <- dim(X)[2]
n <- length(T)
for(i in nr){
for(j in nr){
C22[i,j] <- score_eta_W(eta_W[], b, W, T, X)[i] %*% score_eta_W_prime(b, eta_W, W, T, X)[j] / n
}
}
return(C22)
}
#### Simulation data generation #####
benchmark <- c()
result <- c()
for(k in 1:500){
print(paste0("Round ", k, " is running"))
set.seed(k)
n <- 3000
m <- 5000
N <- n + m
# Randomly split the data into two groups
ind_1 <- sample(N, n)
ind_2 <- setdiff(1:N, ind_1)
# Generate parameters and variables
x1 <- rnorm(N, 30, 5)  # age
x2 <- rnorm(N, 150, 3)  # weight
x1 <- x1 - mean(x1)
x2 <- x2 - mean(x2)
x <- cbind(x1, x2)
gamma <- runif(1, min = -1, max = 1)
p_t <- expit(gamma * rowSums(x))  # assuming gamma is applied to the sum of x1 and x2
t <- rbinom(N, 1, p_t)
intercept <- 0.5
theta <- 0.5
eta <- c(1.2, -0.8)
##### add epsilon #####
rho <- 0.1
cov_matrix <- matrix(c(1, rho, rho, 1), nrow = 2)
samples <- mvrnorm(N, mu = c(0,0), Sigma = cov_matrix) * 0.05
eps <- samples[, 1]
eps_prime <- samples[, 2]
##### Generate (y, w) binary #####
z_y <- cbind(1, t, x) %*% c(intercept, theta, eta)
z_w <- cbind(1, x) %*% c(intercept, eta)
pr_y <- expit(z_y + eps)
pr_w <- expit(z_w + eps_prime)
y <- rbinom(N, 1, pr_y)
w <- rbinom(N, 1, pr_w)
data <- cbind(y, w, t, x)
colnames(data) <- c("y", "w", "t", "x1", "x2")
data_1 <- data[ind_1, ] %>% as.data.frame()
data_2 <- data[ind_2, ] %>% as.data.frame()
##### Algorithm #####
# Step 1, fit theta_hat and eta_hat
glm1 <- glm(y ~ t + x1 + x2, family = "binomial", data = data_1)
theta_hat <- glm1$coefficients[2]
eta_y_hat <- glm1$coefficients[c(3, 4)]
var_theta_hat <- summary(glm1)$coefficients[, 2]^2
glm1_w <- glm(w ~ t + x1 + x2, family = "binomial", data = data_1)
b_hat <- glm1_w$coefficients[2]
eta_w_hat <- glm1_w$coefficients[c(3, 4)]
# Step 2, fit eta_tilde
glm2 <- glm(w ~ t + x1 + x2, family = "binomial", data = data_2)
b_tilde <- glm2$coefficients[2]
eta_tilde <- glm2$coefficients[c(3, 4)]
# Step 3, obtain the weight
# Skip for now
# Step 4, construct the final estimator
data_1_x <- as.matrix(data_1[, c("x1", "x2")])
data_2_x <- as.matrix(data_2[, c("x1", "x2")])
D1 <- calc_D1(theta_hat, eta_y_hat, data_1$y, data_1$t, data_1_x)
D2 <- calc_D2(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
C12 <- calc_C12(theta_hat, eta_y_hat, b_hat, eta_w_hat, data_1$y, data_1$w, data_1$t, data_1_x)
C22 <- calc_C22(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
theta_bar <- theta_hat - (1/D1) * C12 %*% inv(C22) %*% D2 %*% (eta_w_hat - eta_tilde)
benchmark[k] <- theta_hat
result[k] <- theta_bar
}
mean(result)
mean(benchmark)
sd(result)
sd(benchmark)
warnings()
# Load necessary libraries
library(MASS)
library(matlib)
# Define the expit function
expit <- function(x) { exp(x) / (1 + exp(x)) }
# Define the sigmoid function
sigmoid <- function(z) {
return(1 / (1 + exp(-z)))
}
# Define the score functions
score_theta <- function(theta, eta_Y, Y, T, X) {
return(sum((Y - sigmoid(theta * T + X %*% eta_Y)) * T))
}
#score_theta(theta, eta_Y, Y, T, X)
score_theta_prime <- function(theta, eta_Y, Y, T, X){
return(sum(T^2 * sigmoid(theta * T + X %*% eta_Y)/(1+exp(theta * T + X %*% eta_Y))))
}
#score_theta_prime(theta,eta_Y,Y,T,X)
score_eta_W <- function(eta_W, b, W, T, X){
nr = dim(X)[2]
score_eta_w <- c()
for (i in 1:nr) {
score_eta_w[i] = sum(X[,i] * (W - sigmoid(b * T + eta_W[i]*X[,i])))
#score_eta_w[i] = sum(X[,i] * (W - sigmoid(b * T + X %*% eta_W)))
}
return(score_eta_w)
}
#score_eta_W(eta_W,b,W,T,X)
score_eta_W_prime <- function(b, eta_W, W, T, X){
nr = dim(X)[2]
score_eta_w_prime <- c()
for (i in 1:nr) {
score_eta_w_prime[i] = sum(X[,i] * X[,i] * sigmoid(b * T + eta_W[i] * X[,i])/(1+exp(b * T + eta_W[i] * X[,i])))
#score_eta_w_prime[i] = sum(X[,i] * X[,i] * sigmoid(b * T + X %*% eta_W)/(1+exp(b * T + X %*% eta_W)))
}
return(score_eta_w_prime)
}
#score_eta_W_prime(b,eta_W,W,T,X)
# Calculate D1
calc_D1 <- function(theta, eta_Y, Y, T, X) {
n <- length(Y)
D1 <- score_theta_prime(theta, eta_Y, Y, T, X)/n
return(D1)
}
# Calculate D2
calc_D2 <- function(b, eta_W, W, T, X) {
n <- length(T)
nr <- dim(X)[2]
p <- b * T + X %*% eta_W
D2 <- matrix(0 , nrow = nr, ncol = nr)
for (i in 1:nr) {
for(j in 1:nr){
D2[i,j] <- sum(X[,i] * X[,j] * exp(p) / (1+exp(p))^2) /n
}
}
return(D2)
}
# Calculate C12
calc_C12 <- function(theta, eta_Y, b, eta_W, Y, W, T, X) {
n <- length(Y)
C12 <- score_theta(theta, eta_Y, Y, T, X) * score_eta_W_prime(b, eta_W, W, T, X) / n
return(C12)
}
# Calculate C22
calc_C22 <- function(b, eta_W, W, T, X) {
nr <- dim(X)[2]
n <- length(T)
for(i in nr){
for(j in nr){
C22[i,j] <- score_eta_W(eta_W[], b, W, T, X)[i] %*% score_eta_W_prime(b, eta_W, W, T, X)[j] / n
}
}
return(C22)
}
#### Simulation data generation #####
benchmark <- c()
result <- c()
for(k in 1:500){
print(paste0("Round ", k, " is running"))
set.seed(k)
n <- 3000
m <- 5000
N <- n + m
# Randomly split the data into two groups
ind_1 <- sample(N, n)
ind_2 <- setdiff(1:N, ind_1)
# Generate parameters and variables
x1 <- rnorm(N, 30, 5)  # age
x2 <- rnorm(N, 150, 3)  # weight
x1 <- x1 - mean(x1)
x2 <- x2 - mean(x2)
x <- cbind(x1, x2)
gamma <- runif(1, min = -1, max = 1)
p_t <- expit(gamma * rowSums(x))  # assuming gamma is applied to the sum of x1 and x2
t <- rbinom(N, 1, p_t)
intercept <- 0.5
theta <- 0.5
eta <- c(1.5, -1.5)
##### add epsilon #####
rho <- 0.1
cov_matrix <- matrix(c(1, rho, rho, 1), nrow = 2)
samples <- mvrnorm(N, mu = c(0,0), Sigma = cov_matrix) * 0.05
eps <- samples[, 1]
eps_prime <- samples[, 2]
##### Generate (y, w) binary #####
z_y <- cbind(1, t, x) %*% c(intercept, theta, eta)
z_w <- cbind(1, x) %*% c(intercept, eta)
pr_y <- expit(z_y + eps)
pr_w <- expit(z_w + eps_prime)
y <- rbinom(N, 1, pr_y)
w <- rbinom(N, 1, pr_w)
data <- cbind(y, w, t, x)
colnames(data) <- c("y", "w", "t", "x1", "x2")
data_1 <- data[ind_1, ] %>% as.data.frame()
data_2 <- data[ind_2, ] %>% as.data.frame()
##### Algorithm #####
# Step 1, fit theta_hat and eta_hat
glm1 <- glm(y ~ t + x1 + x2, family = "binomial", data = data_1)
theta_hat <- glm1$coefficients[2]
eta_y_hat <- glm1$coefficients[c(3, 4)]
var_theta_hat <- summary(glm1)$coefficients[, 2]^2
glm1_w <- glm(w ~ t + x1 + x2, family = "binomial", data = data_1)
b_hat <- glm1_w$coefficients[2]
eta_w_hat <- glm1_w$coefficients[c(3, 4)]
# Step 2, fit eta_tilde
glm2 <- glm(w ~ t + x1 + x2, family = "binomial", data = data_2)
b_tilde <- glm2$coefficients[2]
eta_tilde <- glm2$coefficients[c(3, 4)]
# Step 3, obtain the weight
# Skip for now
# Step 4, construct the final estimator
data_1_x <- as.matrix(data_1[, c("x1", "x2")])
data_2_x <- as.matrix(data_2[, c("x1", "x2")])
D1 <- calc_D1(theta_hat, eta_y_hat, data_1$y, data_1$t, data_1_x)
D2 <- calc_D2(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
C12 <- calc_C12(theta_hat, eta_y_hat, b_hat, eta_w_hat, data_1$y, data_1$w, data_1$t, data_1_x)
C22 <- calc_C22(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
theta_bar <- theta_hat - (1/D1) * C12 %*% inv(C22) %*% D2 %*% (eta_w_hat - eta_tilde)
benchmark[k] <- theta_hat
result[k] <- theta_bar
}
mean(result)
mean(benchmark)
sd(result)
sd(benchmark)
# Load necessary libraries
library(MASS)
library(matlib)
# Define the expit function
expit <- function(x) { exp(x) / (1 + exp(x)) }
# Define the sigmoid function
sigmoid <- function(z) {
return(1 / (1 + exp(-z)))
}
# Define the score functions
score_theta <- function(theta, eta_Y, Y, T, X) {
return(sum((Y - sigmoid(theta * T + X %*% eta_Y)) * T))
}
#score_theta(theta, eta_Y, Y, T, X)
score_theta_prime <- function(theta, eta_Y, Y, T, X){
return(sum(T^2 * sigmoid(theta * T + X %*% eta_Y)/(1+exp(theta * T + X %*% eta_Y))))
}
#score_theta_prime(theta,eta_Y,Y,T,X)
score_eta_W <- function(eta_W, b, W, T, X){
nr = dim(X)[2]
score_eta_w <- c()
for (i in 1:nr) {
score_eta_w[i] = sum(X[,i] * (W - sigmoid(b * T + eta_W[i]*X[,i])))
#score_eta_w[i] = sum(X[,i] * (W - sigmoid(b * T + X %*% eta_W)))
}
return(score_eta_w)
}
#score_eta_W(eta_W,b,W,T,X)
score_eta_W_prime <- function(b, eta_W, W, T, X){
nr = dim(X)[2]
score_eta_w_prime <- c()
for (i in 1:nr) {
score_eta_w_prime[i] = sum(X[,i] * X[,i] * sigmoid(b * T + eta_W[i] * X[,i])/(1+exp(b * T + eta_W[i] * X[,i])))
#score_eta_w_prime[i] = sum(X[,i] * X[,i] * sigmoid(b * T + X %*% eta_W)/(1+exp(b * T + X %*% eta_W)))
}
return(score_eta_w_prime)
}
#score_eta_W_prime(b,eta_W,W,T,X)
# Calculate D1
calc_D1 <- function(theta, eta_Y, Y, T, X) {
n <- length(Y)
D1 <- score_theta_prime(theta, eta_Y, Y, T, X)/n
return(D1)
}
# Calculate D2
calc_D2 <- function(b, eta_W, W, T, X) {
n <- length(T)
nr <- dim(X)[2]
p <- b * T + X %*% eta_W
D2 <- matrix(0 , nrow = nr, ncol = nr)
for (i in 1:nr) {
for(j in 1:nr){
D2[i,j] <- sum(X[,i] * X[,j] * exp(p) / (1+exp(p))^2) /n
}
}
return(D2)
}
# Calculate C12
calc_C12 <- function(theta, eta_Y, b, eta_W, Y, W, T, X) {
n <- length(Y)
C12 <- score_theta(theta, eta_Y, Y, T, X) * score_eta_W_prime(b, eta_W, W, T, X) / n
return(C12)
}
# Calculate C22
calc_C22 <- function(b, eta_W, W, T, X) {
nr <- dim(X)[2]
n <- length(T)
for(i in nr){
for(j in nr){
C22[i,j] <- score_eta_W(eta_W[], b, W, T, X)[i] %*% score_eta_W_prime(b, eta_W, W, T, X)[j] / n
}
}
return(C22)
}
#### Simulation data generation #####
benchmark <- c()
result <- c()
for(k in 1:500){
print(paste0("Round ", k, " is running"))
set.seed(k)
n <- 3000
m <- 5000
N <- n + m
# Randomly split the data into two groups
ind_1 <- sample(N, n)
ind_2 <- setdiff(1:N, ind_1)
# Generate parameters and variables
x1 <- rnorm(N, 30, 5)  # age
x2 <- rnorm(N, 150, 3)  # weight
x1 <- x1 - mean(x1)
x2 <- x2 - mean(x2)
x <- cbind(x1, x2)
gamma <- runif(1, min = -1, max = 1)
p_t <- expit(gamma * rowSums(x))  # assuming gamma is applied to the sum of x1 and x2
t <- rbinom(N, 1, p_t)
intercept <- 0.5
theta <- 0.4
eta <- c(1.5, -0.8)
##### add epsilon #####
rho <- 0.1
cov_matrix <- matrix(c(1, rho, rho, 1), nrow = 2)
samples <- mvrnorm(N, mu = c(0,0), Sigma = cov_matrix) * 0.05
eps <- samples[, 1]
eps_prime <- samples[, 2]
##### Generate (y, w) binary #####
z_y <- cbind(1, t, x) %*% c(intercept, theta, eta)
z_w <- cbind(1, x) %*% c(intercept, eta)
pr_y <- expit(z_y + eps)
pr_w <- expit(z_w + eps_prime)
y <- rbinom(N, 1, pr_y)
w <- rbinom(N, 1, pr_w)
data <- cbind(y, w, t, x)
colnames(data) <- c("y", "w", "t", "x1", "x2")
data_1 <- data[ind_1, ] %>% as.data.frame()
data_2 <- data[ind_2, ] %>% as.data.frame()
##### Algorithm #####
# Step 1, fit theta_hat and eta_hat
glm1 <- glm(y ~ t + x1 + x2, family = "binomial", data = data_1)
theta_hat <- glm1$coefficients[2]
eta_y_hat <- glm1$coefficients[c(3, 4)]
var_theta_hat <- summary(glm1)$coefficients[, 2]^2
glm1_w <- glm(w ~ t + x1 + x2, family = "binomial", data = data_1)
b_hat <- glm1_w$coefficients[2]
eta_w_hat <- glm1_w$coefficients[c(3, 4)]
# Step 2, fit eta_tilde
glm2 <- glm(w ~ t + x1 + x2, family = "binomial", data = data_2)
b_tilde <- glm2$coefficients[2]
eta_tilde <- glm2$coefficients[c(3, 4)]
# Step 3, obtain the weight
# Skip for now
# Step 4, construct the final estimator
data_1_x <- as.matrix(data_1[, c("x1", "x2")])
data_2_x <- as.matrix(data_2[, c("x1", "x2")])
D1 <- calc_D1(theta_hat, eta_y_hat, data_1$y, data_1$t, data_1_x)
D2 <- calc_D2(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
C12 <- calc_C12(theta_hat, eta_y_hat, b_hat, eta_w_hat, data_1$y, data_1$w, data_1$t, data_1_x)
C22 <- calc_C22(b_hat, eta_w_hat, data_1$w, data_1$t, data_1_x)
theta_bar <- theta_hat - (1/D1) * C12 %*% inv(C22) %*% D2 %*% (eta_w_hat - eta_tilde)
benchmark[k] <- theta_hat
result[k] <- theta_bar
}
mean(result)
mean(benchmark)
sd(result)
sd(benchmark)
library(shiny); runApp('Desktop/origami_shiny_app/origami_shiny_weight_0808.R')
setwd("~/Desktop/origami_shiny_app")
sucra <- read.csv("www/sucra.csv")
View(sucra)
row.names(sucra)<- c("","caesarean","maternal","neonatal","hyper","vaginal")
rownames(sucra)<- c("","caesarean","maternal","neonatal","hyper","vaginal")
colnames(sucra)<- c("","caesarean","maternal","neonatal","hyper","vaginal")
write.csv(sucra,"www/sucra.csv",row.names = FALSE)
test <- read.csv("www/sucra.csv")
View(test)
library(shiny); runApp('combination_weighted_unweighted_origami_0816.R')
library(shiny); runApp('combination_weighted_unweighted_origami_0816.R')
runApp('combination_weighted_unweighted_origami_0816.R')
runApp('combination_weighted_unweighted_origami_0816.R')
library(shiny); runApp('combination_weighted_unweighted_origami_0816.R')
library(shiny); runApp('origami_shiny_app_0911.R')
runApp('origami_shiny_app_0911.R')
runApp('origami_shiny_app_0911.R')
runApp('origami_shiny_app_0911.R')
library("readxl")
read_excel("sucra.xlsx")
setwd("~/Desktop/origami_shiny_app/www")
read_excel("sucra.xlsx")
df <- read_excel("sucra.xlsx")
View(df)
typeof(df)
library("dplyr")
df <- read_excel("sucra.xlsx") %>% as.data.frame()
View(df)
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
runApp('~/Desktop/origami_shiny_app/origami_shiny_app_0911.R')
